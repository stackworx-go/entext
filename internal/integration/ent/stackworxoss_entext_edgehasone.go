// Code generated by entc, DO NOT EDIT.

package ent

import (
	"github.com/stackworx-go/entext/internal/integration/ent/group"
	"github.com/stackworx-go/entext/internal/integration/ent/pet"
	"github.com/stackworx-go/entext/internal/integration/ent/user"
	"github.com/stackworx-go/entext/internal/integration/ent/userstatus"
)

// HasOneUserOrErr() returns one User value or an error if the edge
// was not loaded in eager-loading, loaded but was not found or more than one User was returned.
func (e GroupEdges) HasOneUserOrErr() (*User, error) {
	if e.loadedTypes[0] {
		switch len(e.Users) {
		case 0:
			return nil, &NotFoundError{label: user.Label}
		case 1:
			return e.Users[0], nil
		default:
			return nil, &NotSingularError{user.Label}
		}
	}
	return nil, &NotLoadedError{edge: "users"}
}

// HasOneStatuseOrErr() returns one Statuse value or an error if the edge
// was not loaded in eager-loading, loaded but was not found or more than one Statuse was returned.
func (e UserEdges) HasOneStatuseOrErr() (*UserStatus, error) {
	if e.loadedTypes[0] {
		switch len(e.Statuses) {
		case 0:
			return nil, &NotFoundError{label: userstatus.Label}
		case 1:
			return e.Statuses[0], nil
		default:
			return nil, &NotSingularError{userstatus.Label}
		}
	}
	return nil, &NotLoadedError{edge: "statuses"}
}

// HasOnePetOrErr() returns one Pet value or an error if the edge
// was not loaded in eager-loading, loaded but was not found or more than one Pet was returned.
func (e UserEdges) HasOnePetOrErr() (*Pet, error) {
	if e.loadedTypes[1] {
		switch len(e.Pets) {
		case 0:
			return nil, &NotFoundError{label: pet.Label}
		case 1:
			return e.Pets[0], nil
		default:
			return nil, &NotSingularError{pet.Label}
		}
	}
	return nil, &NotLoadedError{edge: "pets"}
}

// HasOneGroupOrErr() returns one Group value or an error if the edge
// was not loaded in eager-loading, loaded but was not found or more than one Group was returned.
func (e UserEdges) HasOneGroupOrErr() (*Group, error) {
	if e.loadedTypes[2] {
		switch len(e.Groups) {
		case 0:
			return nil, &NotFoundError{label: group.Label}
		case 1:
			return e.Groups[0], nil
		default:
			return nil, &NotSingularError{group.Label}
		}
	}
	return nil, &NotLoadedError{edge: "groups"}
}
