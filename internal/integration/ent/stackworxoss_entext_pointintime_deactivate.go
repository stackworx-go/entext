// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"time"

	"github.com/jackc/pgtype"

	"github.com/stackworx-go/entext/internal/integration/ent/userstatus"
)

func (u *UserStatusClient) UpdateUserStatus(ctx context.Context, parent *User, create *UserStatusCreate) (*UserStatus, error) {
	statuses, err := u.Query().
		Where(
			userstatus.Active(true),
			// TODO: this predicate may not exist
			userstatus.UserID(parent.ID),
		).
		Only(ctx)
	// TODO: inspect error
	if err != nil {
		return nil, err
	}
	_, err = u.UpdateOne(statuses).SetDuration(&pgtype.Tstzrange{
		Lower: statuses.Duration.Lower,
		Upper: pgtype.Timestamptz{
			Time:   time.Now(),
			Status: pgtype.Present,
		},
		LowerType: statuses.Duration.LowerType,
		UpperType: pgtype.Inclusive,
		Status:    statuses.Duration.Status,
	}).Save(ctx)
	if err != nil {
		return nil, err
	}
	create.SetUser(parent).SetActive(false).SetDuration(&pgtype.Tstzrange{
		Lower: pgtype.Timestamptz{
			Time:   time.Now(),
			Status: pgtype.Present,
		},
		Upper: pgtype.Timestamptz{
			Status:           pgtype.Null,
			InfinityModifier: pgtype.Infinity,
		},
		LowerType: statuses.Duration.LowerType,
		UpperType: pgtype.Unbounded,
		Status:    statuses.Duration.Status,
	})
	bulks, err := u.CreateBulk(create).Save(ctx)
	if err != nil {
		return nil, err
	}
	return bulks[0], nil
}

func (u *UserStatusClient) DeactivateUserStatus(ctx context.Context, parent *User) error {
	statuses, err := u.Query().
		Where(
			userstatus.Active(true),
			// TODO: this predicate may not exist
			userstatus.UserID(parent.ID),
		).
		Only(ctx)
	// TODO: inspect error
	if err != nil {
		return err
	}
	_, err = u.UpdateOne(statuses).SetActive(false).SetDuration(&pgtype.Tstzrange{
		Lower: statuses.Duration.Lower,
		Upper: pgtype.Timestamptz{
			Time:   time.Now(),
			Status: pgtype.Present,
		},
		LowerType: statuses.Duration.LowerType,
		UpperType: pgtype.Inclusive,
		Status:    statuses.Duration.Status,
	}).Save(ctx)
	return err
}

// TODO
func (u *UserQuery) WithActiveStatuses() *UserQuery {
	return u.WithStatuses(func(q *UserStatusQuery) {
		q.Where(userstatus.Active(true))
	})
}
