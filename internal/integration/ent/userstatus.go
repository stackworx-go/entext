// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/jackc/pgtype"
	"github.com/stackworx-go/entext/internal/integration/ent/user"
	"github.com/stackworx-go/entext/internal/integration/ent/userstatus"
)

// UserStatus is the model entity for the UserStatus schema.
type UserStatus struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// CreatedByID holds the value of the "created_by_id" field.
	CreatedByID int `json:"created_by_id,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// UpdatedByID holds the value of the "updated_by_id" field.
	UpdatedByID int `json:"updated_by_id,omitempty"`
	// Active holds the value of the "active" field.
	Active bool `json:"active,omitempty"`
	// Duration holds the value of the "duration" field.
	Duration *pgtype.Tstzrange `json:"duration,omitempty"`
	// UserID holds the value of the "user_id" field.
	UserID int `json:"user_id,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the UserStatusQuery when eager-loading is set.
	Edges UserStatusEdges `json:"edges"`
}

// UserStatusEdges holds the relations/edges for other nodes in the graph.
type UserStatusEdges struct {
	// CreatedBy holds the value of the created_by edge.
	CreatedBy *User `json:"created_by,omitempty"`
	// UpdatedBy holds the value of the updated_by edge.
	UpdatedBy *User `json:"updated_by,omitempty"`
	// User holds the value of the user edge.
	User *User `json:"user,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [3]bool
}

// CreatedByOrErr returns the CreatedBy value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e UserStatusEdges) CreatedByOrErr() (*User, error) {
	if e.loadedTypes[0] {
		if e.CreatedBy == nil {
			// The edge created_by was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: user.Label}
		}
		return e.CreatedBy, nil
	}
	return nil, &NotLoadedError{edge: "created_by"}
}

// UpdatedByOrErr returns the UpdatedBy value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e UserStatusEdges) UpdatedByOrErr() (*User, error) {
	if e.loadedTypes[1] {
		if e.UpdatedBy == nil {
			// The edge updated_by was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: user.Label}
		}
		return e.UpdatedBy, nil
	}
	return nil, &NotLoadedError{edge: "updated_by"}
}

// UserOrErr returns the User value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e UserStatusEdges) UserOrErr() (*User, error) {
	if e.loadedTypes[2] {
		if e.User == nil {
			// The edge user was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: user.Label}
		}
		return e.User, nil
	}
	return nil, &NotLoadedError{edge: "user"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*UserStatus) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case userstatus.FieldDuration:
			values[i] = new(pgtype.Tstzrange)
		case userstatus.FieldActive:
			values[i] = new(sql.NullBool)
		case userstatus.FieldID, userstatus.FieldCreatedByID, userstatus.FieldUpdatedByID, userstatus.FieldUserID:
			values[i] = new(sql.NullInt64)
		case userstatus.FieldCreatedAt, userstatus.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		default:
			return nil, fmt.Errorf("unexpected column %q for type UserStatus", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the UserStatus fields.
func (us *UserStatus) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case userstatus.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			us.ID = int(value.Int64)
		case userstatus.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				us.CreatedAt = value.Time
			}
		case userstatus.FieldCreatedByID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field created_by_id", values[i])
			} else if value.Valid {
				us.CreatedByID = int(value.Int64)
			}
		case userstatus.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				us.UpdatedAt = value.Time
			}
		case userstatus.FieldUpdatedByID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field updated_by_id", values[i])
			} else if value.Valid {
				us.UpdatedByID = int(value.Int64)
			}
		case userstatus.FieldActive:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field active", values[i])
			} else if value.Valid {
				us.Active = value.Bool
			}
		case userstatus.FieldDuration:
			if value, ok := values[i].(*pgtype.Tstzrange); !ok {
				return fmt.Errorf("unexpected type %T for field duration", values[i])
			} else if value != nil {
				us.Duration = value
			}
		case userstatus.FieldUserID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field user_id", values[i])
			} else if value.Valid {
				us.UserID = int(value.Int64)
			}
		}
	}
	return nil
}

// QueryCreatedBy queries the "created_by" edge of the UserStatus entity.
func (us *UserStatus) QueryCreatedBy() *UserQuery {
	return (&UserStatusClient{config: us.config}).QueryCreatedBy(us)
}

// QueryUpdatedBy queries the "updated_by" edge of the UserStatus entity.
func (us *UserStatus) QueryUpdatedBy() *UserQuery {
	return (&UserStatusClient{config: us.config}).QueryUpdatedBy(us)
}

// QueryUser queries the "user" edge of the UserStatus entity.
func (us *UserStatus) QueryUser() *UserQuery {
	return (&UserStatusClient{config: us.config}).QueryUser(us)
}

// Update returns a builder for updating this UserStatus.
// Note that you need to call UserStatus.Unwrap() before calling this method if this UserStatus
// was returned from a transaction, and the transaction was committed or rolled back.
func (us *UserStatus) Update() *UserStatusUpdateOne {
	return (&UserStatusClient{config: us.config}).UpdateOne(us)
}

// Unwrap unwraps the UserStatus entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (us *UserStatus) Unwrap() *UserStatus {
	tx, ok := us.config.driver.(*txDriver)
	if !ok {
		panic("ent: UserStatus is not a transactional entity")
	}
	us.config.driver = tx.drv
	return us
}

// String implements the fmt.Stringer.
func (us *UserStatus) String() string {
	var builder strings.Builder
	builder.WriteString("UserStatus(")
	builder.WriteString(fmt.Sprintf("id=%v", us.ID))
	builder.WriteString(", created_at=")
	builder.WriteString(us.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", created_by_id=")
	builder.WriteString(fmt.Sprintf("%v", us.CreatedByID))
	builder.WriteString(", updated_at=")
	builder.WriteString(us.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", updated_by_id=")
	builder.WriteString(fmt.Sprintf("%v", us.UpdatedByID))
	builder.WriteString(", active=")
	builder.WriteString(fmt.Sprintf("%v", us.Active))
	builder.WriteString(", duration=")
	builder.WriteString(fmt.Sprintf("%v", us.Duration))
	builder.WriteString(", user_id=")
	builder.WriteString(fmt.Sprintf("%v", us.UserID))
	builder.WriteByte(')')
	return builder.String()
}

// UserStatusSlice is a parsable slice of UserStatus.
type UserStatusSlice []*UserStatus

func (us UserStatusSlice) config(cfg config) {
	for _i := range us {
		us[_i].config = cfg
	}
}
