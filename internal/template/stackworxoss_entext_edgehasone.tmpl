{{/* gotype: entgo.io/ent/entc/gen.Graph */}}

{{ define "stackworxoss_entext_edgehasone" }}

{{ $pkg := base $.Config.Package }}
{{ template "header" $ }}

import (
	{{ range $n := $.Nodes }}
		"{{ $n.Config.Package }}/{{ $n.Package }}"
	{{- end }}
)

{{- range $n := $.Nodes}}
	{{- with $n.Edges }}
		{{- range $i, $e := . }}
			{{- if not $e.Unique }}
			// HasOne{{ singular $e.StructField }}OrErr() returns one {{ singular $e.StructField }} value or an error if the edge
			// was not loaded in eager-loading, loaded but was not found or more than one {{ singular $e.StructField }} was returned.
			func (e {{ $n.Name }}Edges) HasOne{{ singular $e.StructField }}OrErr() ({{ if not $e.Unique }}{{ end }}*{{ $e.Type.Name }}, error) {
				if e.loadedTypes[{{ $i }}] {
					switch(len(e.{{ $e.StructField }})) {
						case 0:
							return nil, &NotFoundError{label: {{ $e.Type.Package }}.Label}
						case 1:
							return e.{{ $e.StructField }}[0], nil
						default:
							return nil, &NotSingularError{ {{ $e.Type.Package }}.Label}
					}
				}
				return nil, &NotLoadedError{edge: "{{ $e.Name }}"}
			}
			{{- end }}
		{{ end }}
	{{- end }}
{{- end }}
{{ end }}